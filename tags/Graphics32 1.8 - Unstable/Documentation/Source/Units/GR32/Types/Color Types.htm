<html>
<head>
<title>Color Types</title>
<link rel="stylesheet" href="../../../../Styles/Default.css">
</head>

<body bgcolor="#FFFFFF">
<h2><a name="TColor32"></a>TColor32</h2>
<p class="Decl"><b>type</b> TColor32 = <b>type</b> Longword;</p>
<p class="Decl"><b>type</b> PColor32 = ^TColor32;</p>
<p class="Body">A simple ARGB color quad, compatible with 32-bit DIBs.</p>
<p class="Body"> <span class="EmptyRef">TColor32</span> holds color information 
  in ARGB format:</p>
<table width="75%" border="1" bordercolor="#FFFFFF" cellspacing="0">
  <tr> 
    <th>Bits 32...24</th>
    <th>Bits 23...16</th>
    <th>Bits 15...8</th>
    <th>Bits 7...0</th>
  </tr>
  <tr> 
    <td> 
      <div align="center">Alpha</div>
    </td>
    <td> 
      <div align="center">Red</div>
    </td>
    <td> 
      <div align="center">Green</div>
    </td>
    <td> 
      <div align="center">Blue</div>
    </td>
  </tr>
</table>
<p class="Body">This order is different from ABGR pixel format used by most Windows 
  API functions and implemented in Delphi as <span class="EmptyRef">TColor</span> 
  type. A couple of functions is provided to convert colors between different 
  standards: <a href="../../GR32/Routines/Color32.htm">Color32</a>, <a href="../../GR32/Routines/WinColor.htm">WinColor</a>.</p>
<p class="Body">The alpha channel is responsible for pixel’s opacity: zero value 
  corresponds to complete transparency, and the value of 255 corresponds to completely 
  opaque pixels.</p>
<p class="Body">Graphics32 specifies several pre-defined <a href="../../GR32/Constants/Color%20Constants.htm">Color 
  Constants</a>, which are similar to standard ones except that they have properly 
  filled alpha value and swapped red and blue channels.</p>
<h2><a name="TColor32Array"></a>TColor32Array</h2>
<p class="Decl"><b>type</b> TColor32Array = <b>array</b> [0..0] <b>of</b> <a href="#TColor32">TColor32</a>; 
</p>
<p class="Decl"><b>type</b> PColor32Array = ^TColor32Array; </p>
<p class="Body">A reference to array of <a href="#TColor32">TColor32</a>-typed 
  values. </p>
<p class="Body">Most likely you will never use the <span class="EmptyRef">TColor32Array</span> 
  type itself, however <span class="EmptyRef">PColor32Array</span> is the one 
  of some importance. It provides indexed access to color values stored in memory. 
  For example, in <a href="../../GR32/Classes/TBitmap32/_Body.htm">TBitmap32</a>, it is 
  used to access pixel data. </p>
<h2><a name="TArrayOfColor32"></a>TArrayOfColor32 </h2>
<p class="Decl"><b>type</b> TArrayOfColor32 = <b>array of</b> <a href="#TColor32">TColor32</a>; 
</p>
<p class="Body">A dynamic array of <a href="#TColor32">TColor32</a>-typed values. 
</p>
<p class="Body">You may use the standard <span class="API">SetLength</span> function 
  for array allocation and dynamic size changes. </p>
<p class="Body">Do not confuse <a href="#TColor32Array">PColor32Array</a> and 
  <span class="EmptyRef">TArrayOfColor32</span> types. While the first one holds 
  the pointer to a memory location, the second one is a fully functional dynamic 
  array.</p>
<h2> <a name="TPalette32"></a>TPalette32 </h2>
<p class="Decl"><b>type</b> TPalette32 = <b>array</b> [Byte] <b>of</b> <a href="#TColor32">TColor32</a>; 
</p>
<p class="Decl"><b>type</b> PPalette32 = ^TPalette32; </p>
<p class="Body">A fixed-size array of 256 <a href="#TColor32">TColor32</a>-typed 
  values.</p>
<p class="Body"> <span class="EmptyRef">TPalette32</span> type is mostly used 
  to simulate palette-based operations.</p>
</body>
</html>
